public class Solution {
	
    public static int l=0;
	int solve(String[] Graph , int N, int M)
	{
		/* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * Return output and don't print it.
	 	 * Taking input and printing output is handled automatically.
        */
        
        String str="CODINGNINJA";
        boolean visited[][]=new boolean[N][M];
        for(int i=0;i<N;i++){
            for(int j=0;j<M;j++){
                if(Graph[i].charAt(j)==str.charAt(0)){
                    solveHelper(Graph,N,M,i,j,str,visited);
                    if(l>0){
                        return 1;
                    }
                }
            }
        }
        return 0;
	}
    public static void solveHelper(String[] Graph,int N,int M,int i,int j,String str,boolean[][] visited ){
    
        if(str.length()==0){
            l++;
            return;
        }
        if(i<0 || i>=N || j<0 || j>=M){
            return;
        }
        if(visited[i][j]==true){
            return;
        }
        if(str.charAt(0)!=Graph[i].charAt(j)){
            return;
        }
        visited[i][j]=true;;
        
        solveHelper(Graph,N,M,i-1,j,str.substring(1),visited);
        solveHelper(Graph,N,M,i+1,j,str.substring(1),visited);
        solveHelper(Graph,N,M,i,j-1,str.substring(1),visited);
        solveHelper(Graph,N,M,i,j+1,str.substring(1),visited);
        solveHelper(Graph,N,M,i+1,j-1,str.substring(1),visited);
        solveHelper(Graph,N,M,i+1,j+1,str.substring(1),visited);
        solveHelper(Graph,N,M,i-1,j-1,str.substring(1),visited);
        solveHelper(Graph,N,M,i-1,j+1,str.substring(1),visited);
    
        visited[i][j]=false;   
    }
}




// public class Solution {
//     int[][] a = {{-1,-1},{-1,0},{-1,1},{0,-1},{0,1},{1,-1},{1,0},{1,1}};
//     int valid(int x, int y, int N, int M){
//         if(x>=0 && x<N && y>=0 && y<M){
//             return 1;
//         }
//         return 0;
//     }
//     int DFS(String[] Graph, int x, int y, String ans, int N, int M, boolean visited[][]){
//         if(ans.length()==0){
//             return 1;
//         }
//         visited[x][y]=true;
//         int check=0;
//         for(int i=0; i<8; i++){
//             int newx = x + a[i][0];
//             int newy = y + a[i][1];
//             if(valid(newx, newy, N, M)==1 && Graph[newx].charAt(newy)==ans.charAt(0) && visited[newx][newy]==false){
//                 check = check | DFS(Graph, newx, newy, ans.substring(1), N, M, visited);
//             }
//         }
//         visited[x][y]=false;
//         return check;
//     }
// 	int solve(String[] Graph , int N, int M)
// 	{
// 		/* Your class should be named Solution
// 		 * Don't write main().
// 		 * Don't read input, it is passed as function argument.
// 		 * Return output and don't print it.
// 	 	 * Taking input and printing output is handled automatically.
//         */
//         int check=0;
//         String ans = "CODINGNINJA"; 
//         boolean[][] visited = new boolean[N][M];
//         for(int i=0; i<N; i++){
//             for(int j=0; j<M; j++){
//                 if(Graph[i].charAt(j)==ans.charAt(0)){
//                     check = DFS(Graph, i, j,ans.substring(1), N,M, visited);
//                     if(check==1){
//                         break;
//                     }
//                 }
                
//             }
//             if(check==1){
//                 break;
//             }
//         }
//         return check;
// 	}
	
	
// }
